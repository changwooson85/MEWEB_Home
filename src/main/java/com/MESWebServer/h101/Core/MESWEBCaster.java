/*******************************************************************************
' MESWEBCaster.java
'
' Copyright (c) 2007 by Miracom,Inc.
' All rights reserved.
'
' Generated by DevTool XMLGen 1.0
'
' Created at 2025-03-14 16:45:00
'
' Author : Miracom. R&D.
' Description : DevTool Xml Generator Version 1.0
*******************************************************************************/

package com.MESWebServer.h101.Core;

import com.miracom.oneoone.transceiverx.Message;
import com.miracom.oneoone.transceiverx.StreamTransformer;
import com.miracom.oneoone.transceiverx.parser.DeliveryType;
import com.miracom.oneoone.transceiverx.parser.StreamTransformerImpl;
import com.MESWebServer.h101.Core.MESWEBType.*;

import java.util.concurrent.atomic.AtomicBoolean;

public class MESWEBCaster
{
    private String mMESWEBChannel;
    private int mMESWEBTTL;
    private h101stub m_h101Stub;
    private AtomicBoolean m_busy;

    public MESWEBCaster(){
        m_busy = new AtomicBoolean();
    }

    public String getMESWEBChannel()
    {
        return mMESWEBChannel;
    }
    public void setMESWEBChannel(String channel, h101stub h101stub)
    {
        mMESWEBChannel = channel;
        m_h101Stub = h101stub;
    }
    public int getMESWEBTTL()
    {
        return mMESWEBTTL;
    }
    public void setMESWEBTTL(int ttl)
    {
        mMESWEBTTL = ttl;
    }
    public synchronized boolean isBusy() {
        return m_busy.get();
    }
    public boolean MESWEB_View_MGCMTBLDAT(MESWEB_MGCMTBLDAT_In_Tag MESWEB_MGCMTBLDAT_In, MESWEB_MGCMTBLDAT_Out_Tag MESWEB_MGCMTBLDAT_Out)
    {
        return MESWEB_View_MGCMTBLDAT(MESWEB_MGCMTBLDAT_In, MESWEB_MGCMTBLDAT_Out, "", 0, DeliveryType.REQUEST);
    }
    public boolean MESWEB_View_MGCMTBLDAT(MESWEB_MGCMTBLDAT_In_Tag MESWEB_MGCMTBLDAT_In, MESWEB_MGCMTBLDAT_Out_Tag MESWEB_MGCMTBLDAT_Out, String channel, int ttl, short mode)
    {
        try
        {
            this.m_busy.set(true);
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getMESWEBChannel() || getMESWEBChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getMESWEBChannel();
            }
            ttl = ttl <= 0 ? getMESWEBTTL() : ttl;

            Message msg =m_h101Stub.createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "MESWEB");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "MESWEB");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "MESWEB_View_MGCMTBLDAT");

            StreamTransformer former = new StreamTransformerImpl();
            MESWEBType.serialize_MESWEB_MGCMTBLDAT_In_Tag(former, MESWEB_MGCMTBLDAT_In);
            msg.putData(former.getBytes());

            Message rep = m_h101Stub.sendMessage(msg, channel, ttl, mode);
            
            if (DeliveryType.REQUEST == mode) /* Just RequestReply */
            {
                if(null == rep)
                    throw new Exception("Invalid Message!");

                former = new StreamTransformerImpl((byte[]) rep.getData());
                MESWEBType.transform_MESWEB_MGCMTBLDAT_Out_Tag(former, MESWEB_MGCMTBLDAT_Out);
            }

	    	return true;
	    }
        catch(Exception e)
        {
            m_h101Stub.setMessage(e.getMessage());
            return false;
        }
        finally {
            this.m_busy.set(false);
        }
    }

    public boolean MESWEB_Update_Ftp_Job_File(MESWEB_Ftp_Job_File_In_Tag MESWEB_Ftp_Job_File_In, MESWEB_Cmn_Out_Tag MESWEB_Cmn_Out)
    {
        return MESWEB_Update_Ftp_Job_File(MESWEB_Ftp_Job_File_In, MESWEB_Cmn_Out, "", 0, DeliveryType.REQUEST);
    }
    public boolean MESWEB_Update_Ftp_Job_File(MESWEB_Ftp_Job_File_In_Tag MESWEB_Ftp_Job_File_In, MESWEB_Cmn_Out_Tag MESWEB_Cmn_Out, String channel, int ttl, short mode)
    {
        try
        {
            this.m_busy.set(true);
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getMESWEBChannel() || getMESWEBChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getMESWEBChannel();
            }
            ttl = ttl <= 0 ? getMESWEBTTL() : ttl;

            Message msg = m_h101Stub.createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "MESWEB");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "MESWEB");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "MESWEB_Update_Ftp_Job_File");

            StreamTransformer former = new StreamTransformerImpl();
            MESWEBType.serialize_MESWEB_Ftp_Job_File_In_Tag(former, MESWEB_Ftp_Job_File_In);
            msg.putData(former.getBytes());

            Message rep =m_h101Stub.sendMessage(msg, channel, ttl, mode);
            
            if (DeliveryType.REQUEST == mode) /* Just RequestReply */
            {
                if(null == rep)
                    throw new Exception("Invalid Message!");

                former = new StreamTransformerImpl((byte[]) rep.getData());
                MESWEBType.transform_MESWEB_Cmn_Out_Tag(former, MESWEB_Cmn_Out);
            }

	    	return true;
	    }
        catch(Exception e)
        {
            m_h101Stub.setMessage(e.getMessage());
            return false;
        }
        finally {
            this.m_busy.set(false);
        }
    }


}

