/*******************************************************************************
' MESWEBType.cs
'
' Copyright (c) 2007 by Miracom,Inc.
' All rights reserved.
'
' Generated by DevTool XMLGen 1.0
'
' Created at 2025-03-14 16:45:00
'
' Author : Miracom. R&D.
' Description : DevTool Xml Generator Version 1.0
'******************************************************************************/

package com.MESWebServer.h101.Core;


import com.MESWebServer.h101.Core.h101type;
import com.miracom.oneoone.transceiverx.StreamTransformer;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

public class MESWEBType extends h101type
{
    public static class MESWEB_MGCMTBLDAT_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  h_factory;
        public String  table_name;
        public String  key_1;
        public String  key_2;
    }

    public static class MESWEB_MGCMTBLDAT_Out_Tag_data_list
    {
        public String  key_1;
        public String  key_2;
        public String  data_1;
        public String  data_2;
        public String  data_3;
        public String  data_4;
        public String  data_5;
        public String  data_6;
        public String  data_7;
        public String  data_8;
        public String  data_9;
        public String  data_10;
        public String  create_id;
        public String  create_time;
        public String  update_id;
        public String  update_time;
    }

    public static class MESWEB_MGCMTBLDAT_Out_Tag
    {
        public char    h_status_value;
        public String  h_msg_code;
        public String  h_msg;
        public String  h_field_msg;
        public String  h_db_err_msg;
        public String  next_key_1;
        public String  next_key_2;
        public int     _size_data_list;
        public MESWEB_MGCMTBLDAT_Out_Tag_data_list[] data_list;
    }

    public static class MESWEB_Cmn_Out_Tag
    {
        public char    h_status_value;
        public String  h_msg_code;
        public String  h_msg;
        public String  h_field_msg;
        public String  h_db_err_msg;
    }

    @AllArgsConstructor
    @NoArgsConstructor
    public static class MESWEB_Ftp_Job_File_In_Tag_data_list
    {
        public String  device;
        public String  layer;
        public String  lastModifyTime;
    }

    public static class MESWEB_Ftp_Job_File_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  h_factory;
        public String  server_name;
        public char    last_list;
        public String  job_time;
        public int     _size_data_list;
        public MESWEB_Ftp_Job_File_In_Tag_data_list[] data_list;
    }



    public static void serialize_MESWEB_MGCMTBLDAT_In_Tag(StreamTransformer former, MESWEB_MGCMTBLDAT_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.table_name, getTrimSize(target.table_name, 20));
        former.writeMsgSizedString(target.key_1, getTrimSize(target.key_1, 30));
        former.writeMsgSizedString(target.key_2, getTrimSize(target.key_2, 30));
    }

    public static void transform_MESWEB_MGCMTBLDAT_In_Tag(StreamTransformer former, MESWEB_MGCMTBLDAT_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.table_name = former.readMsgString();
        source.key_1 = former.readMsgString();
        source.key_2 = former.readMsgString();
    }

    public static void serialize_MESWEB_MGCMTBLDAT_Out_Tag_data_list(StreamTransformer former, MESWEB_MGCMTBLDAT_Out_Tag_data_list target) throws Exception
    {
        former.writeMsgSizedString(target.key_1, getTrimSize(target.key_1, 30));
        former.writeMsgSizedString(target.key_2, getTrimSize(target.key_2, 30));
        former.writeMsgSizedString(target.data_1, getTrimSize(target.data_1, 50));
        former.writeMsgSizedString(target.data_2, getTrimSize(target.data_2, 50));
        former.writeMsgSizedString(target.data_3, getTrimSize(target.data_3, 50));
        former.writeMsgSizedString(target.data_4, getTrimSize(target.data_4, 50));
        former.writeMsgSizedString(target.data_5, getTrimSize(target.data_5, 50));
        former.writeMsgSizedString(target.data_6, getTrimSize(target.data_6, 50));
        former.writeMsgSizedString(target.data_7, getTrimSize(target.data_7, 50));
        former.writeMsgSizedString(target.data_8, getTrimSize(target.data_8, 50));
        former.writeMsgSizedString(target.data_9, getTrimSize(target.data_9, 50));
        former.writeMsgSizedString(target.data_10, getTrimSize(target.data_10, 50));
        former.writeMsgSizedString(target.create_id, getTrimSize(target.create_id, 50));
        former.writeMsgSizedString(target.create_time, getTrimSize(target.create_time, 50));
        former.writeMsgSizedString(target.update_id, getTrimSize(target.update_id, 50));
        former.writeMsgSizedString(target.update_time, getTrimSize(target.update_time, 50));
    }

    public static void serialize_MESWEB_MGCMTBLDAT_Out_Tag(StreamTransformer former, MESWEB_MGCMTBLDAT_Out_Tag target) throws Exception
    {
        former.writeMsgChar(target.h_status_value);
        former.writeMsgSizedString(target.h_msg_code, getTrimSize(target.h_msg_code, 10));
        former.writeMsgSizedString(target.h_msg, getTrimSize(target.h_msg, 200));
        former.writeMsgSizedString(target.h_field_msg, getTrimSize(target.h_field_msg, 200));
        former.writeMsgSizedString(target.h_db_err_msg, getTrimSize(target.h_db_err_msg, 200));
        former.writeMsgSizedString(target.next_key_1, getTrimSize(target.next_key_1, 30));
        former.writeMsgSizedString(target.next_key_2, getTrimSize(target.next_key_2, 30));
        target._size_data_list = (1000 >= target._size_data_list ? target._size_data_list : 1000);
        former.writeMsgInt(target._size_data_list);
        try
        {
            for(int i = 0; i < target._size_data_list; i++)
            {
                serialize_MESWEB_MGCMTBLDAT_Out_Tag_data_list(former, target.data_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[MESWEB_MGCMTBLDAT_Out_Tag_data_list]");
        }
    }

    public static void transform_MESWEB_MGCMTBLDAT_Out_Tag_data_list(StreamTransformer former, MESWEB_MGCMTBLDAT_Out_Tag_data_list source) throws Exception
    {
        source.key_1 = former.readMsgString();
        source.key_2 = former.readMsgString();
        source.data_1 = former.readMsgString();
        source.data_2 = former.readMsgString();
        source.data_3 = former.readMsgString();
        source.data_4 = former.readMsgString();
        source.data_5 = former.readMsgString();
        source.data_6 = former.readMsgString();
        source.data_7 = former.readMsgString();
        source.data_8 = former.readMsgString();
        source.data_9 = former.readMsgString();
        source.data_10 = former.readMsgString();
        source.create_id = former.readMsgString();
        source.create_time = former.readMsgString();
        source.update_id = former.readMsgString();
        source.update_time = former.readMsgString();
    }

    public static void transform_MESWEB_MGCMTBLDAT_Out_Tag(StreamTransformer former, MESWEB_MGCMTBLDAT_Out_Tag source) throws Exception
    {
        source.h_status_value = former.readMsgChar();
        source.h_msg_code = former.readMsgString();
        source.h_msg = former.readMsgString();
        source.h_field_msg = former.readMsgString();
        source.h_db_err_msg = former.readMsgString();
        source.next_key_1 = former.readMsgString();
        source.next_key_2 = former.readMsgString();
        source._size_data_list = former.readMsgInt();
        source.data_list = new MESWEB_MGCMTBLDAT_Out_Tag_data_list[source._size_data_list];
        try
        {
            for(int i = 0; i < source._size_data_list; i++)
            {
                source.data_list[i] = new MESWEB_MGCMTBLDAT_Out_Tag_data_list();
                transform_MESWEB_MGCMTBLDAT_Out_Tag_data_list(former, source.data_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[MESWEB_MGCMTBLDAT_Out_Tag_data_list]");
        }
    }

    public static void serialize_MESWEB_Cmn_Out_Tag(StreamTransformer former, MESWEB_Cmn_Out_Tag target) throws Exception
    {
        former.writeMsgChar(target.h_status_value);
        former.writeMsgSizedString(target.h_msg_code, getTrimSize(target.h_msg_code, 10));
        former.writeMsgSizedString(target.h_msg, getTrimSize(target.h_msg, 200));
        former.writeMsgSizedString(target.h_field_msg, getTrimSize(target.h_field_msg, 200));
        former.writeMsgSizedString(target.h_db_err_msg, getTrimSize(target.h_db_err_msg, 200));
    }

    public static void transform_MESWEB_Cmn_Out_Tag(StreamTransformer former, MESWEB_Cmn_Out_Tag source) throws Exception
    {
        source.h_status_value = former.readMsgChar();
        source.h_msg_code = former.readMsgString();
        source.h_msg = former.readMsgString();
        source.h_field_msg = former.readMsgString();
        source.h_db_err_msg = former.readMsgString();
    }

    public static void serialize_MESWEB_Ftp_Job_File_In_Tag_data_list(StreamTransformer former, MESWEB_Ftp_Job_File_In_Tag_data_list target) throws Exception
    {
        former.writeMsgSizedString(target.device, getTrimSize(target.device, 30));
        former.writeMsgSizedString(target.layer, getTrimSize(target.layer, 30));
        former.writeMsgSizedString(target.lastModifyTime, getTrimSize(target.lastModifyTime, 14));
    }

    public static void serialize_MESWEB_Ftp_Job_File_In_Tag(StreamTransformer former, MESWEB_Ftp_Job_File_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.server_name, getTrimSize(target.server_name, 20));
        former.writeMsgChar(target.last_list);
        former.writeMsgSizedString(target.job_time, getTrimSize(target.job_time, 14));
        target._size_data_list = (5000 >= target._size_data_list ? target._size_data_list : 5000);
        former.writeMsgInt(target._size_data_list);
        try
        {
            for(int i = 0; i < target._size_data_list; i++)
            {
                serialize_MESWEB_Ftp_Job_File_In_Tag_data_list(former, target.data_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[MESWEB_Ftp_Job_File_In_Tag_data_list]");
        }
    }

    public static void transform_MESWEB_Ftp_Job_File_In_Tag_data_list(StreamTransformer former, MESWEB_Ftp_Job_File_In_Tag_data_list source) throws Exception
    {
        source.device = former.readMsgString();
        source.layer = former.readMsgString();
        source.lastModifyTime = former.readMsgString();
    }

    public static void transform_MESWEB_Ftp_Job_File_In_Tag(StreamTransformer former, MESWEB_Ftp_Job_File_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.server_name = former.readMsgString();
        source.last_list = former.readMsgChar();
        source.job_time = former.readMsgString();
        source._size_data_list = former.readMsgInt();
        source.data_list = new MESWEB_Ftp_Job_File_In_Tag_data_list[source._size_data_list];
        try
        {
            for(int i = 0; i < source._size_data_list; i++)
            {
                source.data_list[i] = new MESWEB_Ftp_Job_File_In_Tag_data_list();
                transform_MESWEB_Ftp_Job_File_In_Tag_data_list(former, source.data_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[MESWEB_Ftp_Job_File_In_Tag_data_list]");
        }
    }


}
